import fs from 'fs/promises';
import path from 'path';
import puppeteer from 'puppeteer';

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { bikeInfo, productUrl } = req.body;

  if (!bikeInfo || !productUrl) {
    return res.status(400).json({ error: 'Missing required fields' });
  }

  // Initialisation de la variable result
  let result = {
    compatibility: 'Non disponible',
    confidence: 'Non disponible',
    argument: 'Non disponible',
  };

  // Extraire uniquement la partie utile de l'URL pour le produit et le v√©lo
  const cleanedProductUrl =
    productUrl.split('/').pop()?.split('?')[0]?.toLowerCase() || productUrl;
  const cleanedBikeUrl =
    bikeInfo.split('/').pop()?.split('?')[0]?.toLowerCase() || bikeInfo;

  let productData;
  let bikeData;
  let productH1 = '';
  let productDescriptionFromFP = '';

  try {
    // Charger le fichier JSON externe
    const filePath = path.join(
      process.cwd(),
      'pages',
      'api',
      'data',
      'data_bike_flux.json',
    );
    const jsonData = await fs.readFile(filePath, 'utf8');
    const products = JSON.parse(jsonData);

    productData = products.find(
      (product) =>
        product.link.split('/').pop()?.split('?')[0]?.toLowerCase() ===
        cleanedProductUrl,
    );

    bikeData = products.find(
      (bike) =>
        bike.link.split('/').pop()?.split('?')[0]?.toLowerCase() ===
        cleanedBikeUrl,
    );
  } catch (error) {
    console.error('Erreur lors du chargement du fichier JSON:', error);
  }

  // Scraping du H1 de la page produit et de la description
  try {
    const browser = await puppeteer.launch({ headless: 'new' });
    const page = await browser.newPage();
    await page.goto(productUrl, { waitUntil: 'domcontentloaded' });

    productH1 = await page.$eval('h1', (element) => element.textContent.trim());

    productDescriptionFromFP = await page
      .$eval('.product-description-text', (element) =>
        element.textContent.trim(),
      )
      .catch(() => 'Description non disponible');

    await browser.close();
  } catch (error) {
    console.error('Erreur lors du scraping du H1 ou de la description:', error);
  }

  // V√©rifie si les informations produit sont disponibles dans le JSON
  let productDescription = '';
  let bikeDescription = '';

  if (productData) {
    productDescription = `
      **Produit :** ${productData.title || 'Non disponible'}
      **Description :** ${productData.description || 'Non disponible'}
      **Marque :** ${productData.brand || 'Non disponible'}
      **Prix :** ${productData.price || 'Non disponible'}
      **Cat√©gorie :** ${productData.category || 'Non disponible'}
      **Lien :** ${productData.link || 'Non disponible'}
    `;
  }

  if (bikeData) {
    bikeDescription = `
      **V√©lo :** ${bikeData.title || 'Non disponible'}
      **Description :** ${bikeData.description || 'Non disponible'}
      **Marque :** ${bikeData.brand || 'Non disponible'}
      **Prix :** ${bikeData.price || 'Non disponible'}
      **Cat√©gorie :** ${bikeData.category || 'Non disponible'}
      **Lien :** ${bikeData.link || 'Non disponible'}
    `;
  }

  try {
    const response = await fetch('https://api.perplexity.ai/chat/completions', {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${process.env.PERPLEXITY_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'llama-3.1-sonar-small-128k-online',
        messages: [
          {
            role: 'user',
            content: `
  Tu es un m√©canicien v√©lo expert. Ta mission est de v√©rifier la compatibilit√© entre un v√©lo sp√©cifique et un bo√Ætier de p√©dalier r√©f√©renc√© sur le site Alltricks. La r√©ponse doit √™tre pr√©cise, technique, et bas√©e sur des sources v√©rifi√©es, telles que les manuels des fabricants (DT Swiss, Shimano, SRAM, Campagnolo), les fiches techniques des v√©los, et les guides d‚Äôentretien certifi√©s (Park Tool). Si la compatibilit√© est incertaine, fournir des recommandations alternatives."
  
  ‚úÖ T√¢che √† r√©aliser :
  1Ô∏è‚É£ Informations v√©lo √† analyser :
  Marque, Mod√®le, Ann√©e
  Transmission install√©e (Shimano, SRAM, etc.)
  
  2Ô∏è‚É£ Sp√©cifications du bo√Ætier de p√©dalier :
  Tu auras acc√®s √† l'URL du produit sur Alltricks, contenant les donn√©es suivantes :
  Largeur (en mm), Diam√®tre du bo√Ætier de p√©dalier, Type de boitier (BSA, BB30, PressFit, etc.)
  
  üîß Crit√®res d'√©valuation :
  Largeur : Correspondance avec le cadre du v√©lo.
  Diam√®tre : V√©rifie si le standard correspond (BSA, BB30, etc.).
  Type de roulements : Compatibilit√© avec le p√©dalier du v√©lo.
  
Ne partage aucune autre information que :
  Compatibilit√© : Oui / Non
  Niveau de confiance : Bas / Moyen / √âlev√©
  Justification (max. 80 caract√®res)
  
  Boitier de p√©dalier √† tester :** ${productDescriptionFromFP}
  V√©lo √† tester :** ${bikeInfo},
  `,
          },
        ],
      }),
    });

    if (!response.ok) {
      throw new Error(`Erreur API Perplexity : ${response.statusText}`);
    }

    const data = await response.json();
    const content = data.choices[0]?.message?.content || '';

    console.log('Contenu extrait:', content);

    result = {
      compatibility:
        content.match(/Compatibilit√©\s*:\s*(Oui|Non)/i)?.[1] === 'Oui'
          ? '‚úîÔ∏è Compatible'
          : '‚ùå Non compatible',
      confidence:
        content.match(/Niveau de Confiance\s*:\s*(Bas|Moyen|√âlev√©)/i)?.[1] ||
        'Non disponible',
      argument:
        content
          .match(/\*\*Justification\s*:\*\*\s*([\s\S]*?)(?=\n|$)/i)?.[1]
          ?.trim() || 'Argument non disponible',
    };
  } catch (error) {
    console.error(
      'Erreur lors de la r√©cup√©ration des donn√©es Perplexity:',
      error,
    );
    result = {
      compatibility: 'Non disponible',
      confidence: 'Non disponible',
      argument: 'Non disponible',
    };
  }

  res.status(200).json({
    productDescription,
    bikeDescription,
    productH1,
    productDescriptionFromFP,
    result,
  });
}
