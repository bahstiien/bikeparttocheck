import fs from 'fs/promises';
import path from 'path';

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { bikeInfo, productUrl } = req.body;

  // V√©rifie que les champs sont bien fournis
  if (!bikeInfo || !productUrl) {
    return res.status(400).json({ error: 'Missing required fields' });
  }

  // Extraire uniquement la partie utile de l'URL pour le produit et le v√©lo
  const cleanedProductUrl =
    productUrl.split('/').pop()?.split('?')[0]?.toLowerCase() || productUrl;
  const cleanedBikeUrl =
    bikeInfo.split('/').pop()?.split('?')[0]?.toLowerCase() || bikeInfo;

  let productData;

  try {
    // Charger le fichier JSON externe
    const filePath = path.join(
      process.cwd(),
      'pages',
      'data',
      'data_bike_flux.json',
    );
    const jsonData = await fs.readFile(filePath, 'utf8');
    const products = JSON.parse(jsonData);

    productData = products.find(
      (product) =>
        product.link.split('/').pop()?.split('?')[0]?.toLowerCase() ===
        cleanedProductUrl,
    );
  } catch (error) {
    console.error('Erreur lors du chargement du fichier JSON:', error);
  }

  // V√©rifie si les informations produit sont disponibles dans le JSON
  let productDescription = '';
  if (productData) {
    productDescription = `
      **Produit :** ${productData.title || 'Non disponible'}
      **Description :** ${productData.description || 'Non disponible'}
      **Marque :** ${productData.brand || 'Non disponible'}
      **Prix :** ${productData.price || 'Non disponible'}
      **Cat√©gorie :** ${productData.category || 'Non disponible'}
      **Lien :** ${productData.link || 'Non disponible'}
      **Type :** ${productData.type || 'Non disponible'}
      **Sport :** ${productData.super_sport || 'Non disponible'}
      **Compatibilit√© mod√®le :** ${
        productData['Compatibilit√© plaquette mod√®le'] || 'Non disponible'
      }
      **Compatibilit√© marque :** ${
        productData['Compatibilit√© plaquette marque'] || 'Non disponible'
      }
    `;
  } else {
    // Si les donn√©es produit ne sont pas disponibles, interroge Perplexity pour obtenir les informations
    try {
      const response = await fetch(
        'https://api.perplexity.ai/chat/completions',
        {
          method: 'POST',
          headers: {
            Authorization: `Bearer ${process.env.PERPLEXITY_API_KEY}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: 'llama-3.1-sonar-small-128k-online',
            messages: [
              {
                role: 'user',
                content: `Obtiens des informations d√©taill√©es sur le produit √† l'URL : ${productUrl} et v√©rifie sa compatibilit√© avec le v√©lo suivant : ${bikeInfo}.`,
              },
            ],
          }),
        },
      );

      if (!response.ok) {
        throw new Error(`Erreur API Perplexity : ${response.statusText}`);
      }

      const data = await response.json();
      productDescription = `
        **Produit :** ${data.choices[0]?.message?.content || 'Non disponible'}
        **Lien :** ${productUrl}
      `;
      console.log(productDescription);
    } catch (error) {
      console.error(
        'Erreur lors de la r√©cup√©ration des donn√©es Perplexity:',
        error,
      );
      return res
        .status(500)
        .json({ error: 'Impossible de r√©cup√©rer les informations produit.' });
    }
  }

  // Payload de la requ√™te
  const body = {
    model: 'llama-3.1-sonar-small-128k-online',
    messages: [
      {
        role: 'system',
        content:
          'Tu es un expert en compatibilit√© de pi√®ces d√©tach√©es pour v√©los (route, VTT, gravel, urbain). Ta mission est de analyser la compatibilit√© entre une pi√®ce sp√©cifique avec un v√©lo donn√© en prenant en compte les crit√®res suivants : - Freinage : V√©rifie si le type de freinage du v√©lo (patins ou disque) correspond √† la pi√®ce. V√©rifie √©galement la compatibilit√© hydraulique/m√©canique et le type de fixation (Post Mount, Flat Mount, etc.) ; Roues et Pneus** : V√©rifie le diam√®tre (700c, 29", 27.5"), la largeur de jante, le type de montage (tubeless, chambre √† air), et la compatibilit√© de le axe (QR, thru-axle) ; **Transmission** : V√©rifie le nombre de vitesses et la compatibilit√© inter-marques (Shimano, SRAM, Campagnolo). V√©rifie √©galement le standard de bo√Ætier de p√©dalier (DUB, Hollowtech II, BB30, etc.).; **Cockpit** : V√©rifie le diam√®tre du cintre, de la potence, et de la tige de selle. V√©rifie √©galement la compatibilit√© avec les guidons sp√©cifiques (Drop Bar, Flat Bar).;**Cadre** : V√©rifie les points de fixation (porte-bidon, garde-boue, porte-bagages) et la compatibilit√© √©lectrique (Di2, AXS). Le format de r√©ponse attendu : ** Compatibilit√© : Oui / Non **, Niveau de confiance : Bas / Moyen / √âlev√© ; Source : Flux produit / IAGen',
      },
      {
        role: 'user',
        content: `Tu es un expert en compatibilit√© de pi√®ces d√©tach√©es pour v√©los. Voici les informations √† analyser :

1Ô∏è‚É£ **Produit √† tester :**
${productDescription}

2Ô∏è‚É£ **V√©lo cible :**
üö≤ **Bike Information:** ${bikeInfo}

üìã Analyse les points suivants :

- Le type de freinage du produit correspond-il au syst√®me de freinage du v√©lo ?
- L'axe de roue est-il compatible avec le cadre du v√©lo ?
- Les dimensions de la roue (diam√®tre, largeur) sont-elles compatibles avec le v√©lo ?

### üîé **Conclusion :**
‚úÖ Compatibilit√© : Oui / Non
üß† Niveau de confiance : Bas / Moyen / √âlev√©
üìö Source : Flux produit / IAGen
`,
      },
    ],
    max_tokens: 500,
    temperature: 0.2,
    top_p: 0.9,
    search_domain_filter: ['perplexity.ai'],
    return_images: false,
    return_related_questions: false,
    search_recency_filter: 'month',
    top_k: 0,
    stream: false,
    presence_penalty: 0,
    frequency_penalty: 1,
  };

  const options = {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${process.env.PERPLEXITY_API_KEY}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(body),
  };

  try {
    const response = await fetch(
      'https://api.perplexity.ai/chat/completions',
      options,
    );

    if (!response.ok) {
      throw new Error(`Erreur API : ${response.statusText}`);
    }

    const data = await response.json();

    res.status(200).json({ answer: data.choices[0].message.content });
  } catch (error) {
    console.error('Erreur:', error);
    res.status(500).json({ error: error.message });
  }
}
